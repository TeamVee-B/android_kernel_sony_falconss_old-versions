#!/sbin/sh
# Live RAMDisk Patcher by Caio99BR <caiooliveirafarias0@gmail.com>

# Sony Xperia E1 Values
# Get device.prop values
builder=$(sed -n "1p" "${working_dir}/device.prop")
custom_kernel=$(sed -n "2p" "${working_dir}/device.prop")
device_name=$(sed -n "3p" "${working_dir}/device.prop")
release=$(sed -n "4p" "${working_dir}/device.prop")
# Boot Partition
boot_partition="/dev/block/platform/msm_sdcc.1/by-name/boot"
# Boot Values
new_boot_ramdisk_offset="--ramdisk_offset 0x02000000"
new_boot_tags_offset="--tags_offset 0x01E00000"
new_boot_pagesize="--pagesize 2048"

# Get values used in original zip
interface="${1}"
updater_fd="${2}"
zipfile="${3}"

# Set ui_print
ui_print() {
	echo -en "ui_print ${1}\n" > /proc/self/fd/"${updater_fd}"
	echo -en "ui_print \n" > /proc/self/fd/"${updater_fd}"
}

# Start of main process
START=$(date +"%s")

# Dirs used
working_dir="/tmp/kernel"
original_dir=$(pwd)

# Clean working folder
rm -rf ${working_dir}/
mkdir -p ${working_dir}/
cd ${working_dir}/

# Unzip current zipfile
unzip "${zipfile}"

# Add permissions to Tools
chmod 777 ${working_dir}/unpackbootimg
chmod 777 ${working_dir}/mkbootimg

# Initial Print
ui_print
ui_print "${builder} Presents"
ui_print "${custom_kernel} for ${device_name}"
ui_print "${release}"

# Set boot files
original_boot_image="${working_dir}/boot.img"
new_boot_image="${working_dir}/newboot.img"

# Pickup original boot.img to use only current ramdisk
dd if=${boot_partition} of=${original_boot_image}

# Unpack current ramdisk from original boot.img
${working_dir}/unpackbootimg ${original_boot_image}

# Check if command not failed
if ! [ "$?" == "0" ]
then
	exit_code=$?
	ui_print "Unpacking failed with exit code: ${exit_code}"
	exit ${exit_code}
fi

if [ -f "${working_dir}/dt.img" ]
then
	new_boot_dt="--dt ${working_dir}/dt.img"
fi

# Make a new boot.img with current ramdisk
${working_dir}/mkbootimg \
--ramdisk "${working_dir}/boot.img-ramdisk.gz" \
--cmdline "$(cat ${working_dir}/boot.img-cmdline)" \
--base "$(cat ${working_dir}/boot.img-base)" \
--kernel "${working_dir}/zImage" \
"${new_boot_ramdisk_offset}" \
"${new_boot_tags_offset}" \
"${new_boot_pagesize}" \
"${new_boot_dt}" \
-o "${new_boot_image}"

# Check if command not failed
if ! [ "$?" == "0" ]
then
	exit_code=$?
	ui_print "Repacking failed with exit code: ${exit_code}"
	exit ${exit_code}
fi

# Flash new boot.img
if ! [ -f "${boot_partition}" ]
then
	ui_print "Wrong boot partition, exiting"
	exit 1
fi
ui_print "Flashing Boot"
dd if=${new_boot_image} of=${boot_partition}

# Copy new modules if we have it
if [ -f "${working_dir}/modules" ]
then
	ui_print "Copying Modules"

	# Desmount /system if user mounted it before
	if [ $(mount | grep /system | wc -l) -ge 1 ]
	then
		_mounted_system_before="true"
		umount /system
	fi
	mount /system

	# Delete all old modules
	rm -rf /system/lib/modules/*

	# Copy new modules
	cp ${working_dir}/modules/*.ko /system/lib/modules/
	mv /system/lib/modules/wlan.ko /system/lib/modules/pronto/pronto_wlan.ko
	ln -s /system/lib/modules/pronto/pronto_wlan.ko /system/lib/modules/wlan.ko

	# Add permissions to modules
	chmod 644 /system/lib/modules/*.ko /system/lib/modules/pronto/pronto_wlan.ko

	# Umount /system if user NOT mounted it before
	if [ ! "${_mounted_system_before}" == "true" ]
	then
		umount /system
	fi
	unset _mounted_system_before
fi

# Clean working ${working_dir} folder
rm -rf ${working_dir}/

# End of work
BUILDTIME=$(($(date +"%s") - ${START}))

# Go back to original dir
cd ${original_dir}

# End of main process
ui_print "${custom_kernel} Installation done in $((${BUILDTIME} % 60))s"
ui_print
